name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft != true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event.pull_request.draft != true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build directory 'dist' not found!"
            exit 1
          fi
          if [ ! -f "dist/code.js" ]; then
            echo "‚ùå Main plugin file 'dist/code.js' not found!"
            exit 1
          fi
          echo "‚úÖ Build successful!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 7

  coverage-comment:
    name: Coverage Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run coverage

      - name: Create Coverage Report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage summary
            const summaryPath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
            const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            
            // Function to get color based on coverage percentage
            function getColor(percentage) {
              if (percentage >= 80) return 'üü¢';
              if (percentage >= 60) return 'üü°';
              return 'üî¥';
            }
            
            // Function to get badge color
            function getBadgeColor(percentage) {
              if (percentage >= 80) return 'brightgreen';
              if (percentage >= 60) return 'yellow';
              return 'red';
            }
            
            // Calculate total coverage
            const total = summary.total;
            const totalCoverage = Math.round(total.statements.pct);
            
            // Create summary table
            let reportBody = `## üìä Coverage Report\n\n`;
            reportBody += `![Coverage](https://img.shields.io/badge/Coverage-${totalCoverage}%25-${getBadgeColor(totalCoverage)}.svg)\n\n`;
            reportBody += `### Summary\n\n`;
            reportBody += `| Metric | Coverage | Details |\n`;
            reportBody += `|--------|----------|---------|\n`;
            reportBody += `| ${getColor(total.statements.pct)} **Statements** | ${total.statements.pct.toFixed(2)}% | ${total.statements.covered}/${total.statements.total} |\n`;
            reportBody += `| ${getColor(total.branches.pct)} **Branches** | ${total.branches.pct.toFixed(2)}% | ${total.branches.covered}/${total.branches.total} |\n`;
            reportBody += `| ${getColor(total.functions.pct)} **Functions** | ${total.functions.pct.toFixed(2)}% | ${total.functions.covered}/${total.functions.total} |\n`;
            reportBody += `| ${getColor(total.lines.pct)} **Lines** | ${total.lines.pct.toFixed(2)}% | ${total.lines.covered}/${total.lines.total} |\n`;
            
            // Create detailed report by directory
            reportBody += `\n<details>\n`;
            reportBody += `<summary>üìÅ Coverage by Directory</summary>\n\n`;
            reportBody += `| File | Statements | Branches | Functions | Lines |\n`;
            reportBody += `|------|------------|----------|-----------|-------|\n`;
            
            // Sort files by path
            const files = Object.keys(summary)
              .filter(key => key !== 'total')
              .sort();
            
            for (const file of files) {
              const data = summary[file];
              const fileName = file.replace(process.cwd() + '/', '');
              
              reportBody += `| \`${fileName}\` | `;
              reportBody += `${getColor(data.statements.pct)} ${data.statements.pct.toFixed(1)}% | `;
              reportBody += `${getColor(data.branches.pct)} ${data.branches.pct.toFixed(1)}% | `;
              reportBody += `${getColor(data.functions.pct)} ${data.functions.pct.toFixed(1)}% | `;
              reportBody += `${getColor(data.lines.pct)} ${data.lines.pct.toFixed(1)}% |\n`;
            }
            
            reportBody += `\n</details>\n`;
            
            // Check if this is a PR
            if (context.issue.number) {
              // Find existing coverage comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('## üìä Coverage Report');
              });
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: reportBody
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: reportBody
                });
              }
            }

  pr-comment:
    name: PR Test Results
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request' && always()
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ needs.test.result }}';
            const buildStatus = '${{ needs.build.result }}';
            
            let statusEmoji = '‚úÖ';
            let statusText = 'All checks passed!';
            
            if (testStatus === 'failure' || buildStatus === 'failure') {
              statusEmoji = '‚ùå';
              statusText = 'Some checks failed. Please review the errors above.';
            } else if (testStatus === 'skipped' || buildStatus === 'skipped') {
              statusEmoji = '‚è≠Ô∏è';
              statusText = 'Some checks were skipped.';
            }
            
            const body = `## ${statusEmoji} CI Results
            
            | Check | Status |
            |-------|--------|
            | **Tests** | ${testStatus === 'success' ? '‚úÖ Passed' : testStatus === 'failure' ? '‚ùå Failed' : '‚è≠Ô∏è Skipped'} |
            | **Build** | ${buildStatus === 'success' ? '‚úÖ Passed' : buildStatus === 'failure' ? '‚ùå Failed' : '‚è≠Ô∏è Skipped'} |
            | **Coverage** | See coverage report comment above |
            | **Node Version** | 20 |
            
            ### ${statusText}
            
            ---
            *This comment is automatically updated on each push.*`;
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('## ‚úÖ CI Results') || comment.body.includes('## ‚ùå CI Results') || comment.body.includes('## ‚è≠Ô∏è CI Results');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }