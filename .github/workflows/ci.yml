name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft != true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event.pull_request.draft != true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build directory 'dist' not found!"
            exit 1
          fi
          if [ ! -f "dist/code.js" ]; then
            echo "❌ Main plugin file 'dist/code.js' not found!"
            exit 1
          fi
          echo "✅ Build successful!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 7

  pr-comment:
    name: PR Test Results
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request' && always()
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ needs.test.result }}';
            const buildStatus = '${{ needs.build.result }}';
            
            let statusEmoji = '✅';
            let statusText = 'All checks passed!';
            
            if (testStatus === 'failure' || buildStatus === 'failure') {
              statusEmoji = '❌';
              statusText = 'Some checks failed. Please review the errors above.';
            } else if (testStatus === 'skipped' || buildStatus === 'skipped') {
              statusEmoji = '⏭️';
              statusText = 'Some checks were skipped.';
            }
            
            const body = `## ${statusEmoji} CI Results
            
            | Check | Status |
            |-------|--------|
            | **Tests** | ${testStatus === 'success' ? '✅ Passed' : testStatus === 'failure' ? '❌ Failed' : '⏭️ Skipped'} |
            | **Build** | ${buildStatus === 'success' ? '✅ Passed' : buildStatus === 'failure' ? '❌ Failed' : '⏭️ Skipped'} |
            | **Node Version** | 20 |
            
            ### ${statusText}
            
            ---
            *This comment is automatically updated on each push.*`;
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('## ✅ CI Results') || comment.body.includes('## ❌ CI Results');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }